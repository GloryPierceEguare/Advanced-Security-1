import string

plaintext = ''
key1 = 'KISWAHILI'
key = key1.lower()
cipher1 = 'XQKP IZ IMWEB LK AUVZCXKW PHL VPE RIKD ASOZZSBZI TOIE ESTD XEJWXM CPS-3. PHPA TA DPW NEZCWB YN S OIE-GPIB KGIPLBTBSWF, WNK UJ WGV KGEPV TA YVW KF APP NSDW NETITVSVY BIUIWQCBK (KUA WQ IX QFETPIW 64). QD\'A HNOIIMTI BGK LHBP NYZ EA TV IQNOKL PHL NTVKT VACPATWX, JMP I HU SWZQFC FVZ "YW KESND." PB\'D VYB LDAA BSM XMO DAZP QCXKLEOUA LZOV\'L WNF OZWN, QL\'O TOIE EO LGJ\'T YMLTVG FAEK WYM. GPWJ WL AEIBBWZ TOQD XBWUASZ JLKU QF 2006, ET SWZSOL SO IM EP EYCDZ BL VPMNQFC A UMH PKAZ BUUKEQYV KKOU. BSM CPS BATQWG (GPAYH PA CMKTDU PHZE WP BZA MK4 IYL WL5 XWMPTJ), EKA MJDLZ TVMZWWSPVR XBMKOUYM QZYU FAW AGAMC WX YRFXEIXIDUSPA. HM NQVJ\'T RVZE RWO HOUO EPO DSNIVCD ARI-2 NWRPIYBC EGQLK ZPUKQF OEJCCM. LCL ET\'Z 2012, IYL CPS-512 ES ZBTTV TGKKPVR OYWV. AVLV HWBAW, JOUM ZN DPW OHH-3 KLVNQVWTLA TA CQYJIMQNIXBDU BLBEMB. AGIE HZP NKALAR, ICE VYB GNDLZD WP USCNPBFLO NSOTLZ. DWWM SNE ZULTVMJ EN OICLGIJA, BBB YWD WJZEYA ZN WIYJIACOM CUSHLLZ. HPOV KDA-3 PA LVXWMJCLL, T\'U QWAJG AW CMMWEIEUL EPKB, MJLLAD BRM AIPYWGMWMFPS HZP KBQLECHT EW DPWER HXATSKSPIVV, AMYXDA SAQNS GQLD TOM EZSMV WNK BCCO AZW-512. AA TPICB XKR H ESQVM. A ZOU\'B EPSVC JIZB TA QWAJG AW LVXWMJCL "VZ IGIJZ"; I APTVU QL\'O GVQYO DW HECR WYM. KVV KF APP NSDW NETITVSVY, E DVV\'E ZOIDHY OIGM K NSROYQEM. YN UKUYAP Q GIFP SRMTV DW OEN, ICE BRIL\'O OBB ZN ZMJOOUIW XBQVA, NVB QWB AGIE VJUMMBARE YMLAYV. SJD DPTTO Q DEKL AZUO UGNE APLV YBZARZ, Q EPSVC WNF EZCVL TA ORIJ. EOTD, IAFJP BRMJA\'S VVP ZOIKKN UQDB CPGQLK KSWYAW OKLQY. AUMAJ IZV\'E REAL W HHAS NEVUPIVV, TB\'C BZA LHZRM-LTGYK JQAPOZ LDRLMQQCP SJD H UPKRIFEST BZ BEZF ET PVEW K PSOH MCYKDQGJ. I APTVU BZA WVZWL KKLQASTJ VOMVO A SICOO-JDKCR KTXRMJ, WNK QQ VSAL YHVWDMC ACAIU, EP\'TV OWP OUM.'
cipher = cipher1.lower()

index = 0
# Loop to iterate through the encrypted text which also ignores the characters that are not letters
for c in cipher:

    if c in string.ascii_lowercase:
        offset = ord(key[index]) - ord('a')
        decrypted_c_num = ord(c) - ord('a') - offset
        if decrypted_c_num < 0:
            decrypted_c_num = decrypted_c_num + 26

        decrypted_c = chr(decrypted_c_num + ord('a'))

        plaintext = plaintext + decrypted_c
        index = (index + 1) % len(key)

    else:
        plaintext = plaintext + c

# Display the encrypted and decrypted text
print("Encrypted: " + cipher)
print("Decrypted: " + plaintext)